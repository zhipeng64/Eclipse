# Docker Compose is a YAML file that defines configurations and runs multi-container Docker applications.
# It helps streamline the process of managing multiple services by allowing them to be defined in a single file,
# instead of manually running individual docker commands and options for each container.

# "docker compose" command should be used when managing docker containers
# automatically using this file, such as injecting environment variables from a .env file.
# because "docker run" has no knowledge of this file.

# Define the services (containers) that make up the application
services:
  # Name of the service (anything logical)
  nginx:
    # Build the Docker image for this service using the specified context and Dockerfile
    build:
      # Specify the build context and Dockerfile location
      # Dockerfile can only access files in the directory (and its subdirectories)
      # specified in the build context, so cannot do "../" which will be outside the context
      context: ./
      # Path to the Dockerfile relative to the context
      dockerfile: ./docker/nginx-reverse-proxy/Dockerfile
      # Pass build-time secrets to the build process so they can be used in the Dockerfile
      secrets:
        - ssl_cert
        - ssl_key
    # Image and tag name
    image: eclipse-nginx:stable-perl
    container_name: Eclipse-nginx
    # Map port 80 on the host to port 80 in the container
    ports:
      - "80:80"

  backend:
    build:
      context: ./
      dockerfile: ./docker/backend/Dockerfile
    image: eclipse-backend:v1.0
    container_name: Eclipse-backend
    # Loads environment variables from a .env file for local development.
    # In this setup, development typically involves running multiple Docker containers locally,
    # simulating the production environment. However, the same .env file can be used in non-Docker setups.
    # Note: For production, secrets are managed securely and not via .env files.
    env_file:
      - ./.env.production

# Secret files must exist locally and must not be committed to version control for security reasons.
secrets:
  ssl_cert:
    file: ./certs/Eclipse_SSL_cert.pem
  ssl_key:
    file: ./certs/Eclipse_dev_private-key.pem
